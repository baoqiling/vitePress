# 构建 vitepress 站点并将其部署到 GitHub Pages 的示例工作流程
#
name: BQL

on:
  # 在针对'main'分支的推送上运行。如果你使用'master'分支作为默认分支，则改为'master'
  push:
    branches: [main]

  # 允许你从Actions 选项卡手动运行此工作流程
  workflow_dispatch: 
#设置GITHUB_TOKEN 的权限，以允许部署到GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
#只允许同时进行一次部暑，跳过正在运行和最新队列之间的运行队列。但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  #构建工作
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0 #如果未启用 1astUpdated，则不需要
      #-uses: pnpm/action-setup@v2 #如果使用 pnpm，请取消注释
      #-uses: oven-sh/setup-bun@v1 #如果使用Bun，请职消注释
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm #或 pnpm / yarn
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Install dependencies
        run: npm ci #或 pnpm install/yarn install / bun insta1l
      - name: Build with vitePress
        run:
          npm run docs:build # 或 pnpm docs:build / yarn docs:build / bun run docs:buiid touch .vitepress/dist/.nojeky11 
          #上面这里我把官网默认的docs/给删掉了
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: .vitepress/dist
        #上面这里我把官网默认的docs/给删掉了
  #部署工作
  deploy:
    environment :
      name: github-pagesurl:${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
     - name: Deploy to GitHub Pages
       id: deployment
       uses: actions/deploy-pages@v2

